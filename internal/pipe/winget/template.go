package winget

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/caarlos0/log"
	"github.com/goreleaser/goreleaser/internal/artifact"
	"github.com/goreleaser/goreleaser/internal/yaml"
	"github.com/goreleaser/goreleaser/pkg/config"
	"github.com/goreleaser/goreleaser/pkg/context"
)

func createYAML(ctx *context.Context, winget config.Winget, in any, tp artifact.Type) error {
	versionContent, err := yaml.Marshal(in)
	if err != nil {
		return err
	}

	filename := winget.Name + extFor(tp)
	path := filepath.Join(ctx.Config.Dist, filename)

	log.WithField("winget version", path).Info("writing")
	if err := os.WriteFile(path, []byte(strings.Join([]string{
		generatedHeader,
		versionLangServer,
		string(versionContent),
	}, "\n")), 0o644); err != nil { //nolint: gosec
		return fmt.Errorf("failed to write winget version: %w", err)
	}

	ctx.Artifacts.Add(&artifact.Artifact{
		Name: filename,
		Path: path,
		Type: tp,
		Extra: map[string]interface{}{
			wingetConfigExtra: winget,
			artifact.ExtraID:  winget.Name,
		},
	})

	return nil
}

const (
	manifestVersion         = "1.5.0"
	versionLangServer       = "# yaml-language-server: $schema=https://aka.ms/winget-manifest.version.1.5.0.schema.json"
	installerLangServer     = "# yaml-language-server: $schema=https://aka.ms/winget-manifest.installer.1.5.0.schema.json"
	defaultLocaleLangServer = "# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.5.0.schema.json"
	defaultLocale           = "en-US"
	generatedHeader         = `# This file was generated by GoReleaser. DO NOT EDIT.`
)

type Version struct {
	PackageIdentifier string
	PackageVersion    string
	DefaultLocale     string
	ManifestType      string
	ManifestVersion   string
}

type InstallerItemFile struct {
	RelativeFilePath     string
	PortableCommandAlias string
}

type InstallerItem struct {
	Architecture         string
	NestedInstallerType  string
	NestedInstallerFiles []InstallerItemFile
	InstallerUrl         string
	InstallerSha256      string
	UpgradeBehavior      string
}

type Installer struct {
	PackageIdentifier string
	PackageVersion    string
	InstallerLocale   string // en-us
	InstallerType     string // zip
	Commands          []string
	ReleaseDate       string
	Installers        []InstallerItem
	ManifestType      string
	ManifestVersion   string
}

type Locale struct {
	PackageIdentifier string
	PackageVersion    string
	PackageLocale     string
	Publisher         string
	PublisherUrl      string
	Author            string
	PackageName       string
	PackageUrl        string
	License           string
	LicenseUrl        string
	Copyright         string
	ShortDescription  string
	Description       string
	Moniker           string
	Tags              []string
	ReleaseNotes      string
	ReleaseNotesUrl   string
	ManifestType      string
	ManifestVersion   string
}

var fromGoArch = map[string]string{
	"amd64": "x64",
	"386":   "x86",
}
