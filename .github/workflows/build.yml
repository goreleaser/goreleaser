name: build

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Set up Snapcraft
        # FIXME: the mkdirs are a hack for https://github.com/goreleaser/goreleaser/issues/1715
        run: |
          sudo apt-get update
          sudo apt-get -yq --no-install-suggests --no-install-recommends install snapcraft
          mkdir -p $HOME/.cache/snapcraft/download
          mkdir -p $HOME/.cache/snapcraft/stage-packages
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      -
        name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Make Setup
        run: |
          make setup
      -
        name: Make CI
        run: |
          make ci
      -
        name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.txt
      -
        name: Check
        run: |
          ./goreleaser check
      -
        name: Diff
        run: git diff
      -
        name: Login to Docker Hub
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Login to GitHub Container Registry
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Snapcraft Login
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          snapcraft login --with <(echo "${{ secrets.SNAPCRAFT_LOGIN }}")
      -
        name: GoReleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            ./goreleaser
          elif [[ $GITHUB_REF == refs/heads/master ]]; then
            ./goreleaser --snapshot
          fi

  build-win-installers:
    name: Build installers
    if: startsWith(github.ref, 'refs/tags/')
    needs: goreleaser
    runs-on: windows-latest
    strategy:
      matrix:
        config:
          - {
              arch: x86_64, label: x64
            }
          - {
              arch: i386, label: x86
            }
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Get version name
        id: get_version
        uses: battila7/get-version-action@v2
      -
        name: Download executables
        id: download_exe
        shell: bash
        run: |
          hub release download "${GITHUB_REF#refs/tags/}" -i 'goreleaser_Windows_${{ matrix.config.arch }}.zip'
          unzip -o *.zip && rm -v *.zip
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      -
        name: Install GoMSI
        run: choco install -y go-msi
      -
        name: Prepare PATH
        shell: bash
        run: |
          echo "$WIX\\bin" >> $GITHUB_PATH
          echo "C:\\Program Files\\go-msi" >> $GITHUB_PATH
      -
        name: Build MSI
        shell: bash
        id: build_msi
        env:
          ZIP_FILE: ${{ steps.download_exe.outputs.zip }}
        run: |
          mkdir -p build
          msi="$(basename "$ZIP_FILE" ".zip").msi"
          printf "::set-output name=msi::%s\n" "$msi"
          go-msi make --msi "$PWD/$msi" --out "$PWD/build" --version ${{ steps.get_version.outputs.version }}
          printf "::set-output name=msi::%s\n" *.msi
      -
        name: Upload MSI
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.build_msi.outputs.msi }}
          asset_name: goreleaser_Windows_${{ matrix.config.label }}_Setup.msi
          tag: ${{ github.ref }}